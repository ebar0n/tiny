[0] $START ::= program EOF 
[1] program ::= unit 
[2] unit ::= external_declaration 
[3] unit ::= unit external_declaration 
[4] external_declaration ::= declare_variable SEMI 
[5] external_declaration ::= declare_function SEMI 
[6] declare_variable ::= type_specifier variable_list 
[7] variable_list ::= ID COMA variable_list 
[8] variable_list ::= ID 
[9] variable_list ::= ID LCLASP NUM RCLASP COMA variable_list 
[10] variable_list ::= ID LCLASP NUM RCLASP 
[11] declare_function ::= type_specifier ID declarator_function block_sentence 
[12] declare_function ::= VOID ID declarator_function block_sentence 
[13] type_specifier ::= INT 
[14] type_specifier ::= BOOLEAN 
[15] declarator_function ::= 
[16] declarator_function ::= LPAREN RPAREN 
[17] declarator_function ::= LPAREN arguments_list_function RPAREN 
[18] block_sentence ::= BEGIN sentence_list END 
[19] arguments_list_function ::= type_specifier ID COMA arguments_list_function 
[20] arguments_list_function ::= type_specifier ID 
[21] sentence_list ::= sentence_list sentence SEMI 
[22] sentence_list ::= sentence SEMI 
[23] sentence ::= if_sentence 
[24] sentence ::= declare_variable 
[25] sentence ::= declare_function 
[26] sentence ::= block_sentence 
[27] sentence ::= repeat_sentence 
[28] sentence ::= assign_sentence 
[29] sentence ::= read_sentence 
[30] sentence ::= write_sentence 
[31] sentence ::= for_sentence 
[32] sentence ::= return_sentence 
[33] sentence ::= function_sentence 
[34] sentence ::= error 
[35] if_sentence ::= IF logical_expression THEN sentence_list END 
[36] if_sentence ::= IF logical_expression THEN sentence_list ELSE sentence_list END 
[37] repeat_sentence ::= REPEAT sentence_list UNTIL expression 
[38] assign_sentence ::= ID ASSIGN expression 
[39] assign_sentence ::= array_var_access ASSIGN expression 
[40] read_sentence ::= READ ID 
[41] read_sentence ::= READ array_var_access 
[42] write_sentence ::= WRITE expression 
[43] for_sentence ::= FOR LPAREN eq_sentence SEMI logical_expression SEMI eq_sentence RPAREN sentence_list END 
[44] return_sentence ::= RETURN factor 
[45] return_sentence ::= RETURN 
[46] function_sentence ::= ID LPAREN arguments_function RPAREN 
[47] function_sentence ::= ID LPAREN RPAREN 
[48] logical_expression ::= expression AND logical_expression 
[49] logical_expression ::= expression OR logical_expression 
[50] logical_expression ::= expression 
[51] expression ::= additive_expression GE additive_expression 
[52] expression ::= additive_expression GT additive_expression 
[53] expression ::= additive_expression LE additive_expression 
[54] expression ::= additive_expression LT additive_expression 
[55] expression ::= additive_expression EQ additive_expression 
[56] expression ::= additive_expression NE additive_expression 
[57] expression ::= function_sentence 
[58] expression ::= additive_expression 
[59] expression ::= array_var_access 
[60] additive_expression ::= additive_expression PLUS multiplicative_expression 
[61] additive_expression ::= additive_expression MINUS multiplicative_expression 
[62] additive_expression ::= multiplicative_expression 
[63] multiplicative_expression ::= multiplicative_expression TIMES factor 
[64] multiplicative_expression ::= multiplicative_expression OVER factor 
[65] multiplicative_expression ::= factor 
[66] factor ::= LPAREN expression RPAREN 
[67] factor ::= NUM 
[68] factor ::= MINUS NUM 
[69] factor ::= ID 
[70] factor ::= TRUE 
[71] factor ::= FALSE 
[72] factor ::= error 
[73] array_var_access ::= ID LCLASP additive_expression RCLASP 
[74] eq_sentence ::= ID EQ expression 
[75] arguments_function ::= additive_expression COMA arguments_function 
[76] arguments_function ::= additive_expression 
